plugins {
  id 'application'
  id 'com.adarshr.test-logger' version '2.0.0'
  id 'org.openjfx.javafxplugin' version '0.0.8'
  id "org.beryx.jlink" version "2.17.3"
  id "org.javamodularity.moduleplugin" version "1.5.0"
  id "com.github.ben-manes.versions" version "0.28.0"
}

version = "0.2.0"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
    mavenCentral()
    maven {url 'http://dl.bintray.com/jerady/maven'}
    maven {url 'http://dl.bintray.com/hohonuuli/maven' }
    maven {url 'http://dl.bintray.com/org-mbari/maven' }
}

javafx {
    version = "14"
    modules = [ 
        'javafx.base',
        'javafx.controls',
        'javafx.fxml',
        'javafx.graphics', 
        'javafx.media', 
        'javafx.swing'
    ]
}

def runtimeJvmArgs = [
        '-Xms1g',
        '--add-exports', 'javafx.base/com.sun.javafx.binding=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.event=com.jfoenix',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=com.jfoenix',
        '--add-exports', 'javafx.graphics/com.sun.javafx.stage=com.jfoenix'
]

test {
    moduleOptions {
        runOnClasspath = true
    }
    testlogger {
        theme 'mocha' // task level
    }
}

def vcr4j = "4.3.2.jre11"
dependencies {
    implementation 'io.reactivex.rxjava2:rxjavafx:2.2.2'
    implementation 'org.kordamp.ikonli:ikonli-material-pack:11.3.5'
    implementation 'org.slf4j:slf4j-api:1.8.0-beta4'
    implementation "com.jfoenix:jfoenix:9.0.9"
    implementation "org.kordamp.ikonli:ikonli-javafx:11.3.5"
    implementation "org.mbari:mbarix4j:2.0.5.jre11"
    implementation "org.mbari.vcr4j:vcr4j-core:${vcr4j}"
    implementation "org.mbari.vcr4j:vcr4j-sharktopoda:${vcr4j}"
    implementation "uk.co.caprica:vlcj:3.10.1"
    runtimeOnly('ch.qos.logback:logback-classic:1.3.0-alpha4')  {
        exclude group: 'javax.activation'
    }
    runtimeOnly 'javax.servlet:javax.servlet-api:4.0.1'
    runtimeOnly 'org.fusesource.jansi:jansi:1.18'
    testImplementation 'junit:junit:4.12'
}


mainClassName = 'jsharktopoda/org.mbari.m3.jsharktopoda.javafx.JSharktopoda'
application {
    mainClassName = mainClassName
    applicationDefaultJvmArgs = runtimeJvmArgs
}



jar {
    manifest {
        attributes 'Main-Class': 'org.mbari.m3.jsharktopoda.javafx.JSharktopoda'
    }
}


jlink {

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    
    launcher {
        name = 'jsharktopoda'
    }

    addExtraDependencies("javafx")

    jpackage {
        jpackageHome = System.getenv("JPACKAGE_HOME")
        // jpackageHome = "C:\\Program Files\\AdoptOpenJDK\\jdk-14.0.0.36-hotspot"

        def customInstallerOptions = [
                "--app-version", project.version,
                "--copyright", "Monterey Bay Aquarium Research Institute 2020",
                "--name", project.name,
                "--vendor", "org.mbari"
        ]

        if  (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            installerType = "deb"
        }
        else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = "msi"
            customInstallerOptions.addAll([
                "--win-upgrade-uuid", "bd89f21a-a2c3-49c1-9502-345199c3ed8e",
                "--win-menu-group", "VARS",
                "--win-menu"
            ])
        }
        else {
            installerType = "dmg"
            customInstallerOptions.addAll([
                "--mac-package-name", "jsharktopoda",
                "--mac-package-identifier", project.name
            ])
        }
        installerOptions = customInstallerOptions

    }
}